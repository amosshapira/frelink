#!/bin/bash

set -u
set -e

if [[ `id -u` != "0" ]]; then
	echo >&2 "This script should be run as root!"
	exit 33
fi


# Array of cleanup functions
declare -a on_exit_commands


# Cleanup function for robustness
on_exit()
{ 
	if grep frelink /proc/modules &>/dev/null; then
		rmmod frelink.ko
	fi

	for i in "${on_exit_commands[@]}"; do
		eval $i
	done
}
trap on_exit EXIT

# Utility to add an exit function
add_on_exit()
{
	local n=${#on_exit_commands[*]}
	on_exit_commands[$n]="$*"
}



# Standardized fail function
fail()
{
	echo >&2 "Test $1: fail"
	exit 34
}

# Standardized pass function
pass()
{
	echo >&2 "Test $1: pass"
}


#Test 1: If run with no arguments, frelink should exit normally
test1()
{
	if ! ./frelink; then
		fail 1
	else
		pass 1
	fi
}

# Test 2: The module should be able to be insmodded/rmmoded
#         with no ill effects. (look at dmesg)
test2()
{
	if ! insmod frelink.ko; then
		fail 2
	fi
	if ! rmmod frelink.ko; then
		fail 2
	else
		pass 2 
	fi
}

# Test 3: When the module is loaded, /proc/frelink should appear
#         and disappear when it is unloaded.
test3()
{
	insmod frelink.ko
	if [ -r /proc/frelink ]; then
		pass 3.1
	else
		fail 3.1
	fi

	rmmod frelink.ko
	if [ -r /proc/frelink ]; then
		fail 3.2
	else
		pass 3.2
	fi
}

# Test 4: Test ioctl connection between userspace and kernel
test4()
{
	insmod frelink.ko
	if ! ./frelink --test-ioctl; then
		fail 4
	else
		pass 4
	fi
	rmmod frelink.ko
}

# Test 5: Test recovering a file from /proc/$$/fd/6
test5()
{
	local tmp
	tmpfile=`mktemp`
	echo "blabla" > "$tmpfile"
	exec 6<> "$tmpfile" # open $tmpfile, assign to fd 6
	add_on_exit rm -f "$tmpfile"
	rm -f "$tmpfile"

	insmod frelink.ko
	./frelink /proc/$$/fd/6

	# If the file was not recovered
	if ! [ -r "$tmpfile" ]; then
		fail 5.1
	else
		pass 5.1
	fi

	tmp=`readlink /proc/$$/fd/6`

	# If the link is not restored
	if [[ "$tmp" != "$tmpfile" ]]; then
		fail 5.2
	else
		pass 5.2
	fi

	sleep 50
	tmp=`cat "$tmpfile"`

	# If the contents of the file are not the correct ones
	if [[ "$tmp" != "blabla" ]]; then
		fail 5.3
	else
		pass 5.3
	fi

	exec 6>&-  # close fd 6

	if ! [ -r "$tmpfile" ]; then
		fail 5.4
	else
		pass 5.4
	fi

	rmmod frelink.ko
}

# Test 6: Test loop mount recovery
test6()
{
	local lodev
	local tmpfile=`mktemp -u`.img
	local tmpdir=`mktemp -d`

	dd if=/dev/zero of="$tmpfile" bs=1 count=0 seek=128M &>/dev/null
	yes | mkfs.ext2 "$tmpfile" &>/dev/null
	mount "$tmpfile" "$tmpdir" -o loop &>/dev/null

	add_on_exit umount "$tmpdir"
	add_on_exit rmdir "$tmpdir"
	add_on_exit rm -f "$tmpfile"

	# Find loop device associated with our file
	lodev=`losetup -a | grep "$tmpfile" | sed 's/:.*//'`

	rm -f "$tmpfile"

	insmod frelink.ko
	./frelink $lodev

	# Wait for the recovery to happen
	sleep 10

	# If the file was not recovered
	if ! [ -r "$tmpfile" ]; then
		fail 6.1
	else
		fail 6.1
	fi

	# If the file doesn't stay undeleted
	rmmod frelink.ko
	umount "$tmpdir"
	if ! [ -r "$tmpfile" ]; then
		fail 6.2
	else
		pass 6.2
	fi

	rmmod frelink.ko
}


# Actually run the tests (easy to activate / deactivate)
test1
test2
test3
test4
test5
test6
